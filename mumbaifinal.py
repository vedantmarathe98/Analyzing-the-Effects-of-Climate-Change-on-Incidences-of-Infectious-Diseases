# -*- coding: utf-8 -*-
"""MumbaiFinal.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/129g75NXzobIc-mw5Xwe474fTMLEWk7pB
"""

import warnings
warnings.filterwarnings('ignore')
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
#!pip install plotly
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
import datetime as dt
from datetime import timedelta
from sklearn.model_selection import GridSearchCV
from sklearn import linear_model

from sklearn.metrics import accuracy_score
from sklearn.preprocessing import StandardScaler
# from sklearn.cluster import KMeans
from sklearn.metrics import silhouette_score,silhouette_samples
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.metrics import mean_squared_error,r2_score
import statsmodels.api as sm
from statsmodels.tsa.api import Holt,SimpleExpSmoothing,ExponentialSmoothing
from fbprophet import Prophet
from sklearn.preprocessing import PolynomialFeatures
from statsmodels.tsa.stattools import adfuller
!pip install pmdarima
from pmdarima import auto_arima
std=StandardScaler()

"""**IMPORT DATASET**# New section"""

df=pd.read_csv('/content/MumbaiFinal.csv')
df.head()

print("Size/Shape of the dataset: ",df.shape)
print("Checking for null values:\n",df.isnull().sum())
print("Checking Data-type of each column:\n",df.dtypes)

"""*italicised text*# New section"""



df["Date"]=pd.to_datetime(df["Date"])
df["Date"].head()

datewise=df.groupby(["Date"]).agg({"NoofincidencesDengue":'sum'})
datewise["Days Since"]=datewise.index-datewise.index.min()
datewise["Days Since"].head()



dataset = df.copy()

cols = ['INDEX','YEAR','Date','NoofincidencesMalaria','NoofincidencesChickengunya']
dataset.drop(cols, axis = 1, inplace = True)
dataset.head()

dataset.corr(method='pearson')

plt.figure(figsize=(10,7))
sns.heatmap(dataset.corr(method='pearson'), annot=True)

dataset.corr(method='kendall')

plt.figure(figsize=(10,7))
sns.heatmap(dataset.corr(method='kendall'), annot=True)

dataset.corr(method='spearman')

plt.figure(figsize=(10,7))
sns.heatmap(dataset.corr(method='spearman'), annot=True)

dataset.plot(subplots=True,figsize=(10,10))
plt.show()

dataset.drop('NoofincidencesDengue', axis=1).corrwith(dataset.NoofincidencesDengue).plot(kind = 'bar', grid = True,
                                                   figsize = (8, 5),
                                                   title = "Correlation with No of incidences:Dengue")

fig=plt.figure(figsize=(10,10))
sns.boxplot(data = dataset,notch = True,linewidth = 2.5, width = 0.50)
plt.show()



# pairObject.map(plt.scatter)
pairObject = sns.PairGrid(dataset)
pairObject.map_diag(sns.distplot)
pairObject.map_lower(sns.scatterplot)
pairObject.map_upper(sns.scatterplot)

sns.distplot(df.NoofincidencesDengue)

grp =dataset.groupby("RH")
x= grp["NoofincidencesDengue"].agg(np.mean)

plt.figure(figsize=(16,5))
plt.plot(x,'ro',color='r')
plt.xticks(rotation=90)
plt.title("Comparision")
plt.xlabel("Relative Humidity")
plt.ylabel("No of Incidences:Dengue")
plt.show()

dataset.plot()

"""**MODELS USED IN OUR Project**

"""

cols = ['TMRF']
dataset.drop(cols, axis = 1, inplace = True)
dataset.head()

"""##Random forest"""

X1 = dataset.iloc[:,:-1].values
y1 = dataset.iloc[:, -1].values

from sklearn.model_selection import train_test_split
X_train, X_test, y_train, y_test = train_test_split(X1, y1, test_size=0.3, random_state=0)

from sklearn.ensemble import RandomForestRegressor
regressor = RandomForestRegressor(n_estimators = 10, random_state = 0,min_samples_leaf=4)
regressor.fit(X_train, y_train)

y_pred = regressor.predict(X_test)

from sklearn import metrics
from sklearn.metrics import mean_absolute_error
rmse_random = np.sqrt(metrics.mean_squared_error(y_test,y_pred))
Rsqure_random =r2_score(y_test, y_pred)
mean_absolute_error_random =metrics.mean_absolute_error(y_test, y_pred)
print("Root Mean Sqaured Error:",rmse_random)
print("R-Sqaured Error:",Rsqure_random)
print("Mean Absolute Error:",mean_absolute_error_random)

"""##Descison Tree

"""

from sklearn.tree import DecisionTreeRegressor
regressor_decison = DecisionTreeRegressor(random_state = 10,criterion='mae',splitter='random')
regressor_decison.fit(X_train, y_train)

y_pred_decison =regressor_decison.predict(X_test)

from sklearn import metrics
rmse_decsion = np.sqrt(metrics.mean_squared_error(y_test,y_pred_decison))
Rsqure_descion =r2_score(y_test, y_pred_decison)
mean_absolute_error_desicon =metrics.mean_absolute_error(y_test, y_pred_decison)
print("Root Mean Sqaured Error:",rmse_decsion)
print("R-Sqaured Error:",Rsqure_descion)
print("Mean Absolute Error:",mean_absolute_error_desicon)

"""##Support Vector Regression"""

from sklearn.svm import SVR
Svr_regressor = SVR(kernel = 'rbf')
Svr_regressor.fit(X_train, y_train)

y_pred_SVR =Svr_regressor.predict(X_test)

from sklearn import metrics
rmse_svr = np.sqrt(metrics.mean_squared_error(y_test,y_pred_SVR))
Rsqure_svr =r2_score(y_test, y_pred_SVR)
mean_absolute_error_SVR =metrics.mean_absolute_error(y_test, y_pred_SVR)
print("Root Mean Sqaured Error:",rmse_svr)
print("R-Sqaured Error:",Rsqure_svr)
print("Mean Absolute Error:",mean_absolute_error_SVR)

"""## Multiple Linear Regression"""

from sklearn.linear_model import LinearRegression
regressor_linear = LinearRegression(fit_intercept=False)
regressor_linear.fit(X_train, y_train)

y_pred_leg =regressor_linear.predict(X_test)

from sklearn import metrics
rmse_linear = np.sqrt(metrics.mean_squared_error(y_test,y_pred_leg))
Rsqure_linear =r2_score(y_test, y_pred_leg)
mean_absolute_error_linear =metrics.mean_absolute_error(y_test, y_pred_leg)
print("Root Mean Sqaured Error:",rmse_linear)
print("R-Sqaured Error:",Rsqure_linear)
print("Mean Absolute Error:",mean_absolute_error_linear)

"""##Polynomial Regression

"""

from sklearn.preprocessing import PolynomialFeatures

polynom = PolynomialFeatures(degree = 2)
X_polynom = polynom.fit_transform(X_train)

PolyReg = LinearRegression(normalize=True,fit_intercept=False)
PolyReg.fit(X_polynom, y_train)

y_pred_poly =PolyReg.predict((polynom.fit_transform(X_test)))

rmse_poly = np.sqrt(metrics.mean_squared_error(y_test,y_pred_poly))
Rsqure_poly =r2_score(y_test, y_pred_poly)
mean_absolute_error_poly =metrics.mean_absolute_error(y_test, y_pred_poly)
print("Root Mean Sqaured Error:",rmse_poly)
print("R-Sqaured Error:",Rsqure_poly)
print("Mean Absolute Error:",mean_absolute_error_poly)

"""##ElasticNet Model"""

from sklearn.linear_model import ElasticNet
model = ElasticNet(alpha=1.0, l1_ratio=0.5)
model.fit(X_train, y_train)

y_pred_model =model.predict(X_test)

from sklearn import metrics
rmse_elastic = np.sqrt(metrics.mean_squared_error(y_test,y_pred_model))
Rsqure_elastic =r2_score(y_test, y_pred_model)
mean_absolute_error_elastic =metrics.mean_absolute_error(y_test, y_pred_model)
print("Root Mean Sqaured Error:",rmse_elastic)
print("R-Sqaured Error:",Rsqure_elastic)
print("Mean Absolute Error:",mean_absolute_error_elastic)

"""#Time Series Forecasting"""

datewise["Days Since"]=datewise.index-datewise.index[0]
datewise["Days Since"]=datewise["Days Since"].dt.days

train_ml=datewise.iloc[:int(datewise.shape[0]*0.95)]
valid_ml=datewise.iloc[int(datewise.shape[0]*0.95):]
model_scores=[]
model_scores1=[]
model_scores2=[]

"""##Holt's Linear Model"""

#Holt's Linear Model
model_train=datewise.iloc[:int(datewise.shape[0]*0.95)]
valid=datewise.iloc[int(datewise.shape[0]*0.95):]
y_pred=valid.copy()

holt=Holt(np.asarray(model_train["NoofincidencesDengue"])).fit(smoothing_level=0.4, smoothing_slope=0.4,optimized=False)

y_pred["Holt"]=holt.forecast(len(valid))
model_scores.append(np.sqrt(mean_squared_error(y_pred["NoofincidencesDengue"],y_pred["Holt"])))
model_scores1.append(r2_score(y_pred["NoofincidencesDengue"],y_pred["Holt"]))
model_scores2.append(metrics.mean_absolute_error(y_pred["NoofincidencesDengue"],y_pred["Holt"]))

print("Root Mean Square Error Holt's Linear Model: ",np.sqrt(mean_squared_error(y_pred["NoofincidencesDengue"],y_pred["Holt"])))
print("Root Squared Error Holt's Linear Model: ",r2_score(y_pred["NoofincidencesDengue"],y_pred["Holt"]))
print("Mean Absolute Error Holt's Linear Model: ",metrics.mean_absolute_error(y_pred["NoofincidencesDengue"],y_pred["Holt"]))

fig=go.Figure()
fig.add_trace(go.Scatter(x=model_train.index, y=model_train["NoofincidencesDengue"],
                    mode='lines+markers',name="Train Data for No of incidences:Dengue"))
fig.add_trace(go.Scatter(x=valid.index, y=valid["NoofincidencesDengue"],
                    mode='lines+markers',name="Validation Data for No of incidences:Dengue",))
fig.add_trace(go.Scatter(x=valid.index, y=y_pred["Holt"],
                    mode='lines+markers',name="Prediction of No of incidences:Dengue",))
fig.update_layout(title="No of incidences:Dengue Holt's Linear Model Prediction",
                 xaxis_title="Date",yaxis_title="No of incidences:Dengue",legend=dict(x=0,y=1,traceorder="normal"))
fig.show()

model_train=datewise.iloc[:int(datewise.shape[0]*0.95)]
valid=datewise.iloc[int(datewise.shape[0]*0.95):]
y_pred=valid.copy()

"""##AR Model (using AUTO ARIMA)"""

#AR Model (using AUTO ARIMA)
model_ar= auto_arima(model_train["NoofincidencesDengue"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=4,max_q=0,
                   suppress_warnings=True,stepwise=False,seasonal=False)
model_ar.fit(model_train["NoofincidencesDengue"])

prediction_ar=model_ar.predict(len(valid))
y_pred["AR Model Prediction"]=prediction_ar

model_scores.append(np.sqrt(mean_squared_error(y_pred["NoofincidencesDengue"],y_pred["AR Model Prediction"])))
model_scores1.append(r2_score(y_pred["NoofincidencesDengue"],y_pred["AR Model Prediction"]))
model_scores2.append(metrics.mean_absolute_error(y_pred["NoofincidencesDengue"],y_pred["AR Model Prediction"]))
print("Root Mean Square Error for AR Model: ",np.sqrt(mean_squared_error(y_pred["NoofincidencesDengue"],y_pred["AR Model Prediction"])))
print("R-Squared Error for AR Model: ",r2_score(y_pred["NoofincidencesDengue"],y_pred["AR Model Prediction"]))
print("Mean Absolute Error for AR Model: ",metrics.mean_absolute_error(y_pred["NoofincidencesDengue"],y_pred["AR Model Prediction"]))

fig=go.Figure()
fig.add_trace(go.Scatter(x=model_train.index, y=model_train["NoofincidencesDengue"],
                    mode='lines+markers',name="Train Data for No of incidences : Dengue"))
fig.add_trace(go.Scatter(x=valid.index, y=valid["NoofincidencesDengue"],
                    mode='lines+markers',name="Validation Data for No of incidences : Dengue",))
fig.add_trace(go.Scatter(x=valid.index, y=y_pred["AR Model Prediction"],
                    mode='lines+markers',name="Prediction of No of incidences : Dengue",))
fig.update_layout(title="No of incidences : Dengue AR Model Prediction",
                 xaxis_title="Date",yaxis_title="No of incidences : Dengue",legend=dict(x=0,y=1,traceorder="normal"))
fig.show()

"""##MA Model (using AUTO ARIMA)"""

#MA Model (using AUTO ARIMA)
model_train=datewise.iloc[:int(datewise.shape[0]*0.95)]
valid=datewise.iloc[int(datewise.shape[0]*0.95):]
y_pred=valid.copy()

model_ma= auto_arima(model_train["NoofincidencesDengue"],trace=True, error_action='ignore', start_p=0,start_q=0,max_p=0,max_q=2,
                   suppress_warnings=True,stepwise=False,seasonal=False)
model_ma.fit(model_train["NoofincidencesDengue"])

prediction_ma=model_ma.predict(len(valid))
y_pred["MA Model Prediction"]=prediction_ma

model_scores.append(np.sqrt(mean_squared_error(valid["NoofincidencesDengue"],prediction_ma)))
model_scores1.append(r2_score(valid["NoofincidencesDengue"],prediction_ma))
model_scores2.append(metrics.mean_absolute_error(valid["NoofincidencesDengue"],prediction_ma))

print("Root Mean Square Error for MA Model: ",np.sqrt(mean_squared_error(valid["NoofincidencesDengue"],prediction_ma)))
print("R-Squared Error for MA Model: ",r2_score(valid["NoofincidencesDengue"],prediction_ma))
print("Mean Absolute Error for MA Model: ",metrics.mean_absolute_error(valid["NoofincidencesDengue"],prediction_ma))

fig=go.Figure()
fig.add_trace(go.Scatter(x=model_train.index, y=model_train["NoofincidencesDengue"],
                    mode='lines+markers',name="Train Data for No of incidences:Dengue"))
fig.add_trace(go.Scatter(x=valid.index, y=valid["NoofincidencesDengue"],
                    mode='lines+markers',name="Validation Data for No of incidences:Dengue",))
fig.add_trace(go.Scatter(x=valid.index, y=y_pred["MA Model Prediction"],
                    mode='lines+markers',name="Prediction for No of incidences:Dengue",))
fig.update_layout(title="No of incidences:Dengue MA Model Prediction",
                 xaxis_title="Date",yaxis_title="No of incidences:Dengue",legend=dict(x=0,y=1,traceorder="normal"))
fig.show()

"""##ARIMA Model (using AUTOARIMA)"""

#ARIMA Model (using AUTOARIMA)
model_train=datewise.iloc[:int(datewise.shape[0]*0.95)]
valid=datewise.iloc[int(datewise.shape[0]*0.95):]
y_pred=valid.copy()

model_arima= auto_arima(model_train["NoofincidencesDengue"],trace=True, error_action='ignore', start_p=1,start_q=1,max_p=3,max_q=3,
                   suppress_warnings=True,stepwise=False,seasonal=False)
model_arima.fit(model_train["NoofincidencesDengue"])

prediction_arima=model_arima.predict(len(valid))
y_pred["ARIMA Model Prediction"]=prediction_arima

model_scores.append(np.sqrt(mean_squared_error(valid["NoofincidencesDengue"],prediction_arima)))
model_scores1.append(r2_score(valid["NoofincidencesDengue"],prediction_arima))
model_scores2.append(metrics.mean_absolute_error(valid["NoofincidencesDengue"],prediction_arima))

print("Root Mean Square Error for ARIMA Model: ",np.sqrt(mean_squared_error(valid["NoofincidencesDengue"],prediction_arima)))
print("R-Squared Error for ARIMA Model: ",r2_score(valid["NoofincidencesDengue"],prediction_arima))
print("Mean Absolute Error for ARIMA Model: ",metrics.mean_absolute_error(valid["NoofincidencesDengue"],prediction_arima))

fig=go.Figure()
fig.add_trace(go.Scatter(x=model_train.index, y=model_train["NoofincidencesDengue"],
                    mode='lines+markers',name="Train Data for No of incidences:Dengue"))
fig.add_trace(go.Scatter(x=valid.index, y=valid["NoofincidencesDengue"],
                    mode='lines+markers',name="Validation Data for No of incidences:Dengue",))
fig.add_trace(go.Scatter(x=valid.index, y=y_pred["ARIMA Model Prediction"],
                    mode='lines+markers',name="Prediction for No of incidences:Dengue",))
fig.update_layout(title="Confirmed Cases ARIMA Model Prediction",
                 xaxis_title="Date",yaxis_title="No of incidences:Dengue",legend=dict(x=0,y=1,traceorder="normal"))
fig.show()

"""##SARIMA Model (using AUTO ARIMA)"""

#SARIMA Model (using AUTO ARIMA)
model_sarima= auto_arima(model_train["NoofincidencesDengue"],trace=True, error_action='ignore',
                         start_p=0,start_q=0,max_p=2,max_q=2,m=7,
                   suppress_warnings=True,stepwise=True,seasonal=True)
model_sarima.fit(model_train["NoofincidencesDengue"])

prediction_sarima=model_sarima.predict(len(valid))
y_pred["SARIMA Model Prediction"]=prediction_sarima

model_scores.append(np.sqrt(mean_squared_error(y_pred["NoofincidencesDengue"],y_pred["SARIMA Model Prediction"])))
model_scores1.append(r2_score(y_pred["NoofincidencesDengue"],y_pred["SARIMA Model Prediction"]))
model_scores2.append(metrics.mean_absolute_error(y_pred["NoofincidencesDengue"],y_pred["SARIMA Model Prediction"]))

print("Root Mean Square Error for SARIMA Model: ",np.sqrt(mean_squared_error(y_pred["NoofincidencesDengue"],y_pred["SARIMA Model Prediction"])))
print("R-Squared Error for SARIMA Model: ",r2_score(y_pred["NoofincidencesDengue"],y_pred["SARIMA Model Prediction"]))
print("Mean Absolute Error for SARIMA Model: ",metrics.mean_absolute_error(y_pred["NoofincidencesDengue"],y_pred["SARIMA Model Prediction"]))

fig=go.Figure()
fig.add_trace(go.Scatter(x=model_train.index, y=model_train["NoofincidencesDengue"],
                    mode='lines+markers',name="Train Data for No of incidences:Dengue"))
fig.add_trace(go.Scatter(x=valid.index, y=valid["NoofincidencesDengue"],
                    mode='lines+markers',name="Validation Data for No of incidences:Dengue",))
fig.add_trace(go.Scatter(x=valid.index, y=y_pred["SARIMA Model Prediction"],
                    mode='lines+markers',name="Prediction for No of incidences:Dengue",))
fig.update_layout(title="Confirmed Cases SARIMA Model Prediction",
                 xaxis_title="Date",yaxis_title="No of incidences:Dengue",legend=dict(x=0,y=1,traceorder="normal"))
fig.show()

"""##Facebook's Prophet Model for forecasting"""

#Facebook's Prophet Model for forecasting
prophet_c=Prophet(interval_width=0.95,weekly_seasonality=True,)
prophet_confirmed=pd.DataFrame(zip(list(datewise.index),list(datewise["NoofincidencesDengue"])),columns=['ds','y'])

prophet_c.fit(prophet_confirmed)

forecast_c=prophet_c.make_future_dataframe(periods=17)
forecast_confirmed=forecast_c.copy()

confirmed_forecast=prophet_c.predict(forecast_c)

model_scores.append(np.sqrt(mean_squared_error(datewise["NoofincidencesDengue"],confirmed_forecast['yhat'].head(datewise.shape[0]))))
model_scores1.append(r2_score(datewise["NoofincidencesDengue"],confirmed_forecast['yhat'].head(datewise.shape[0])))
model_scores2.append(metrics.mean_absolute_error(datewise["NoofincidencesDengue"],confirmed_forecast['yhat'].head(datewise.shape[0])))

print("Root Mean Squared Error for Prophet Model: ",np.sqrt(mean_squared_error(datewise["NoofincidencesDengue"],confirmed_forecast['yhat'].head(datewise.shape[0]))))
print("R-Squared Error for Prophet Model: ",r2_score(datewise["NoofincidencesDengue"],confirmed_forecast['yhat'].head(datewise.shape[0])))
print("Mean Absolute Error for Prophet Model: ",metrics.mean_absolute_error(datewise["NoofincidencesDengue"],confirmed_forecast['yhat'].head(datewise.shape[0])))

print(prophet_c.plot(confirmed_forecast))

print(prophet_c.plot_components(confirmed_forecast))

"""#Comparision Table for regression model

####Root Mean Squared Error Table For REGRESSION MODEL
"""

list1 = [['Random Forest',rmse_random],['Descision tree',rmse_decsion],['Support Vector Regression',rmse_svr],['Multiple Linear regression',rmse_linear],['ElasticNet Model',rmse_elastic],['Polynomial Regression',rmse_poly]]
Comparision = pd.DataFrame(list1)
Comparision.columns = ['Regression Model','RootMeanSquareError']
Comparision

labels = Comparision["Regression Model"].values
labels=labels.tolist()
labels

RMSE =Comparision['RootMeanSquareError'].values
RMSE = RMSE.tolist()
RMSE

"""####R-Squared Error Table For REGRESSION MODEL"""

list2 = [['Random Forest',Rsqure_random],['Descision tree',Rsqure_descion],['Support Vector Regression',Rsqure_svr],['Multiple Linear regression',Rsqure_linear],['ElasticNet Model',Rsqure_elastic],['Polynomial Regression',Rsqure_poly]]
Comparision2 = pd.DataFrame(list2)
Comparision2.columns = ['Regression Model','R-Sqaured Error']
Comparision2

RSQUARE = Comparision2['R-Sqaured Error'].values
RSQUARE = RSQUARE.tolist()

"""####Mean Absolute Error For RERESSION MODEL"""

list3 = [['Random Forest',mean_absolute_error_random],['Descision tree',mean_absolute_error_desicon],['Support Vector Regression',mean_absolute_error_SVR],['Multiple Linear regression',mean_absolute_error_linear],['ElasticNet Model',mean_absolute_error_elastic],['Polynomial Regression',mean_absolute_error_poly]]
Comparision3 = pd.DataFrame(list3)
Comparision3.columns = ['Regression Model','Mean Absolute Error']
Comparision3

MEAN_ABSOLUTE_ERROR=Comparision3['Mean Absolute Error'].values
MEAN_ABSOLUTE_ERROR = MEAN_ABSOLUTE_ERROR.tolist()

l = []
l.append(RMSE)
l.append(RSQUARE)
l.append(MEAN_ABSOLUTE_ERROR)
l

import numpy as np
import matplotlib.pyplot as plt

X_axis = np.arange(len(labels))

color_list = ['b', 'g', 'r']
gap = .8 / len(l)
plt.figure(figsize=(17,8))
for i, row in enumerate(l):
  X = np.arange(len(row))
  plt.bar(X + i * gap, row,
    width = gap,
    color = color_list[i % len(color_list)])

plt.xticks(X_axis, labels)
plt.show()

"""#Comparision Table for Time Forecasting Model

"""

model_names=["Holt's Time forecasting model",
            "Auto Regressive Model (AR)","Moving Average Model (MA)","ARIMA Model","SARIMA Model","Facebook's Prophet Model"]
model_summary=pd.DataFrame(zip(model_names,model_scores),columns=["Model Name","Root Mean Squared Error"])
model_summary

labels1 = model_summary['Model Name'].values
labels1=labels1.tolist()
labels1

RMSE_time =model_summary['Root Mean Squared Error'].values
RMSE_time = RMSE_time.tolist()
RMSE_time

model_summary1=pd.DataFrame(zip(model_names,model_scores1),columns=["Model Name","R-Squared Error"])
model_summary1

Rsquare_time =model_summary1['R-Squared Error'].values
Rsquare_time =Rsquare_time.tolist()
Rsquare_time

model_summary2=pd.DataFrame(zip(model_names,model_scores2),columns=["Model Name","Mean absolute Error"])
model_summary2

MEAN_ABSOLUTE_ERROR_time =model_summary2['Mean absolute Error'].values
MEAN_ABSOLUTE_ERROR_time =MEAN_ABSOLUTE_ERROR_time.tolist()
MEAN_ABSOLUTE_ERROR_time

l2 = []
l2.append(RMSE_time)
l2.append(Rsquare_time)
l2.append(MEAN_ABSOLUTE_ERROR_time)
l2

import numpy as np
import matplotlib.pyplot as plt

X_axis = np.arange(len(labels1))

color_list = ['b', 'g', 'r']
gap = .8 / len(l2)
plt.figure(figsize=(19,8))
for i, row in enumerate(l2):
  X = np.arange(len(row))
  plt.bar(X + i * gap, row,
    width = gap,
    color = color_list[i % len(color_list)])

plt.xticks(X_axis, labels1)
plt.show()